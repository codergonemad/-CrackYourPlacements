//NEW APPROACH
class Solution {
    public int maxProfit(int[] prices) {
        int ans=0;
        int count=0;
        for(int i=0;i<prices.length;i++)
        {
            ans=Math.max(ans,prices[i]-prices[count]);
            if(prices[i]<prices[count])
                count=i;
        }
        return ans;
    }
}
//DID IN ONE LOOP
class Solution {
    public int maxProfit(int[] prices) {
        int min=Integer.MAX_VALUE;
        int max=0;
        for(int i=0;i<prices.length;i++)
        {
            if(prices[i]<min)
                min=prices[i];
            else
                if(prices[i]-min>max)
                    max=prices[i]-min;
        }
        return max;

    }
}
//TIME LIMIT EXCEEDED(BRUTE FORCE)
class Solution {
    public int maxProfit(int[] prices) {
        int temp=0;
        for(int i=0;i<prices.length-1;i++)
        {
            for(int j=i+1;j<prices.length;j++)
            {
                int profit=prices[j]-prices[i];
                if(profit>temp)
                    temp=profit;
            }
        }
        return temp;

    }
}
