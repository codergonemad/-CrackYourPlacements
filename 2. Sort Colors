//MERGE SORT
class Solution {
    public void sortColors(int[] nums) {
           int l=0;
        int r=nums.length-1;
        int m=l+(r-l)/2;
        sort(nums,l,r);
        for(int i=0;i<nums.length;i++)
        {
            System.out.print(nums[i]);
        }
    }
    void merge(int[] nums,int l,int m,int r)
    {
        int n1=m-l+1;
        int n2=r-m;
        int[] arr=new int[n1];
        int[] arr1=new int[n2];
        for(int i=0;i<n1;i++)
        {
            arr[i]=nums[i+l];
        }
        for(int i=0;i<n2;i++)
        {
            arr1[i]=nums[m+1+i];
        }
        int i=0;
        int j=0;
        int k=l;
        while(i<n1 && j<n2)
        {
            if(arr[i]<=arr1[j])
            {
                nums[k]=arr[i];
                i++;
            }
            else
            {
                nums[k]=arr1[j];
                j++;
            }
            k++; 
        }
        while(i<n1)
        {
            nums[k]=arr[i];
            i++;
            k++;
        }
        while(j<n2)
        {
            nums[k]=arr1[j];
            j++;
            k++;
        }
    }
    void sort(int[] nums,int l,int r)
    {
        if(l<r)
        {
            int m=l+(r-l)/2;
            sort(nums,l,m);
            sort(nums,m+1,r);
            merge(nums,l,m,r);
        }
    }
        
    }
    //sorting
    class Solution {
    public void sortColors(int[] nums) {
            int temp=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=0;j<nums.length;j++)
            {
                if(nums[i]<nums[j])
                {
                    temp=nums[i];
                    nums[i]=nums[j];
                    nums[j]=temp;
                }
                    
            }
        }
        for(int i=0;i<nums.length;i++)
        {
            System.out.print(nums[i]);
        }
        
    }
}
