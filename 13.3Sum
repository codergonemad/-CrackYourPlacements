//https://leetcode.com/problems/3sum/
SOLUTION 1

class Solution {
           public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        
        for(int i=0; i<nums.length; i++){
            if(i>0 && nums[i] == nums[i-1]){
                continue;
            }
            
            int toFind = -nums[i];
            int low = i+1, high = nums.length-1;
            while(low < high){
                int sum = nums[low] + nums[high];
                if(sum == toFind){
                    List<Integer> curr = new ArrayList<>();
                    curr.add(nums[i]);
                    curr.add(nums[low]);
                    curr.add(nums[high]);
                    ans.add(curr);
                    low++;
                    high--;
                    while(low < high && nums[low] == nums[low-1]) low++;
                    while(low < high && nums[high] == nums[high+1]) high--;
                }else if(sum < toFind){
                    low++;
                }else{
                    high--;
                }
            }
        }
        return ans;
    }
  }
SOLUTION 2 USING SET

class Solution {
           public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        Set<String> seen=new HashSet<>();
        for(int i=0;i<nums.length-1;i++)
        {
            int num=-1*nums[i];
            int left=i+1;
            int right=nums.length-1;
            while(left<right)
            {
                int sum=nums[left]+nums[right];
                if(num==sum)
                {
                    List<Integer> list=new ArrayList<>();
                    list.add(nums[i]);
                    list.add(nums[left]);
                    list.add(nums[right]);
                    if(!seen.contains(""+nums[i]+nums[left]+nums[right]))
                        ans.add(list);
                    if(nums[i]==nums[right] && nums[i]==nums[left])
                       return ans;
                    seen.add(""+nums[i]+nums[left]+nums[right]);
                    left++;
                    right--;
                }
                else
                  if(sum<num)
                      left++;
                else
                    right--;  
            }
        }
        return ans;
    }
  }
//Tatti Code
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> temp=new ArrayList<>();
        Set<Integer> seen =new HashSet<Integer>();
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                for(int k=j+1;k<nums.length;k++)
                {
                    if((nums[i]+nums[j]+nums[k])==0 )
                    {
                        seen.add(nums[i]);
                        seen.add(nums[j]);
                        seen.add(nums[k]);
                    
                            if(!seen.contains(nums[i]) || !seen.contains(nums[j])|| !seen.contains(nums[k]))
                                temp.add(Arrays.asList(nums[i],nums[j],nums[k]));
                        }
                        
                
            }}}
        return temp;
        
    }
}
